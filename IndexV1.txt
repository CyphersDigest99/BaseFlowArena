<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Freestyle Rap Trainer</title>
    <style>
        body {
            background-color: #1a1a1a;
            color: #ffffff;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            text-align: center;
        }
        #header, #gauge-container {
            background-color: #333;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        #word-container {
            margin: 30px 0;
        }
        #current-word {
            font-size: 3.5em;
            color: #00ff99;
            margin-bottom: 20px;
        }
        #word-tree {
            position: relative;
            height: 120px;
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
        }
        .tree-word {
            position: absolute;
            color: #66ccff;
            font-size: 1.2em;
            text-align: center;
        }
        .line {
            position: absolute;
            border-top: 1px dashed #66ccff;
        }
        canvas {
            margin: 10px 0;
        }
        button {
            background-color: #00ff99;
            border: none;
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            border-radius: 5px;
            margin: 5px;
        }
        button:hover {
            background-color: #00cc77;
        }
    </style>
</head>
<body>
    <div id="header">
        <h1>Freestyle Rap Trainer</h1>
        <p>Beat: "Trap Flow" | BPM: 140 | Key: F# Minor</p>
        <button onclick="toggleAudio()">▶️/⏸️</button>
        <progress value="30" max="100"></progress>
    </div>

    <div id="word-container">
        <div id="current-word">Loading...</div>
        <div id="word-tree"></div>
    </div>

    <div id="gauge-container">
        <h3>BPM Gauge</h3>
        <canvas id="gauge" width="300" height="80"></canvas>
        <p>Beat: 140 | You: <span id="rap-speed">120</span></p>
        <p id="status">On Beat: Slightly Behind</p>
    </div>

    <button onclick="changeWord()">New Word</button>
    <button onclick="toggleAudio()">Start/Stop</button>

    <script>
        try {
            let wordList = [];
            let isFetching = false;

            // Levenshtein Distance function
            function getLevenshteinDistance(a, b) {
                const matrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));
                for (let i = 0; i <= a.length; i++) matrix[0][i] = i;
                for (let j = 0; j <= b.length; j++) matrix[j][0] = j;
                for (let j = 1; j <= b.length; j++) {
                    for (let i = 1; i <= a.length; i++) {
                        const indicator = a[i - 1] === b[j - 1] ? 0 : 1;
                        matrix[j][i] = Math.min(
                            matrix[j][i - 1] + 1, // deletion
                            matrix[j - 1][i] + 1, // insertion
                            matrix[j - 1][i - 1] + indicator // substitution
                        );
                    }
                }
                return matrix[b.length][a.length];
            }

            function changeWord() {
                console.log('changeWord called');
                if (wordList.length === 0 || isFetching) {
                    console.log('Blocked: wordList empty or isFetching = true');
                    return;
                }
                isFetching = true;
                console.log('Changing word...');

                const newWord = wordList[Math.floor(Math.random() * wordList.length)];
                console.log(`Selected new word: "${newWord}"`);
                document.getElementById("current-word").innerText = newWord;
                console.log(`New word set: "${newWord}"`);

                try {
                    console.log('Fetching related words from Datamuse...');
                    fetch(`https://api.datamuse.com/words?rel_syn=${newWord}&max=3`)
                        .then(response => {
                            console.log('Datamuse response received:', response.status);
                            return response.json();
                        })
                        .then(data => {
                            const related = data.length > 0 ? data.map(item => item.word) : ["[no synonyms]"];
                            const tree = document.getElementById("word-tree");
                            tree.innerHTML = "";
                            const treeWidth = 300;
                            const spacing = related.length > 1 ? treeWidth / (related.length - 1) : 0;
                            related.forEach((word, i) => {
                                const span = document.createElement("span");
                                span.className = "tree-word";
                                span.innerText = word;
                                const xPos = (i * spacing) - (treeWidth / 2) + 150;
                                span.style.left = `calc(50% + ${xPos}px - 25px)`;
                                span.style.top = "40px";
                                tree.appendChild(span);

                                const line = document.createElement("div");
                                line.className = "line";
                                line.style.left = `calc(50% - 1px)`;
                                line.style.top = "20px";
                                line.style.width = `${Math.abs(xPos)}px`;
                                line.style.transform = xPos < 0 ? "translateX(-100%)" : "none";
                                tree.appendChild(line);
                            });
                            console.log('Word tree updated with:', related);
                            isFetching = false;
                        })
                        .catch(error => {
                            console.error('Error fetching related words:', error);
                            document.getElementById("word-tree").innerHTML = "<span class='tree-word'>[no related words]</span>";
                            isFetching = false;
                        });
                } catch (e) {
                    console.error('Caught fetch error in changeWord:', e);
                    isFetching = false;
                }
            }

            function loadWords() {
                console.log('Starting to load words...');
                fetch('random word list.txt')
                    .then(response => {
                        console.log('Fetch response received:', response.status);
                        if (!response.ok) throw new Error('Failed to load random word list.txt');
                        return response.text();
                    })
                    .then(text => {
                        console.log('Text received, processing...');
                        wordList = [...new Set(text.split('\n').map(word => word.trim()))];
                        console.log(`Loaded ${wordList.length} unique words from random word list.txt`);
                        changeWord();
                    })
                    .catch(error => {
                        console.error('Error loading words:', error);
                        document.getElementById("current-word").innerText = "Error loading random word list.txt";
                    });
            }

            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            if (SpeechRecognition) {
                const recognition = new SpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = false;
                recognition.onresult = (event) => {
                    const transcript = event.results[event.results.length - 1][0].transcript.toLowerCase().trim();
                    const currentWord = document.getElementById("current-word").innerText.toLowerCase().trim();
                    console.log(`Heard: "${transcript}" | Looking for: "${currentWord}"`);
                    
                    const distance = getLevenshteinDistance(transcript, currentWord);
                    const similarityThreshold = 2; // Up to 2 edits
                    if (distance <= similarityThreshold && transcript[0] === currentWord[0]) {
                        console.log(`Fuzzy match found! Distance: ${distance}, Triggering changeWord()`);
                        changeWord();
                    } else {
                        console.log(`No match, Distance: ${distance}, keeping current word`);
                    }
                };
                recognition.onerror = (event) => console.error('Speech recognition error:', event.error);
                recognition.start();
            } else {
                console.warn('Speech Recognition not supported in this browser.');
            }

            function toggleAudio() {
                console.log("Audio toggled (placeholder)");
            }

            const canvas = document.getElementById("gauge");
            const ctx = canvas.getContext("2d");
            let rapSpeed = 120;
            const beatBPM = 140;

            function drawGauge() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = "#666";
                ctx.fillRect(0, 0, (beatBPM / 200) * canvas.width, 30);
                ctx.fillStyle = "#00ff99";
                ctx.fillRect(0, 40, (rapSpeed / 200) * canvas.width, 30);
            }

            setInterval(() => {
                rapSpeed = Math.random() * 160 + 100;
                document.getElementById("rap-speed").innerText = Math.round(rapSpeed);
                const diff = Math.abs(beatBPM - rapSpeed);
                document.getElementById("status").innerText = diff < 10 ? "On Beat: Perfect" : 
                    rapSpeed < beatBPM ? "On Beat: Slightly Behind" : "On Beat: Slightly Ahead";
                drawGauge();
            }, 2000);

            loadWords();
            drawGauge();
        } catch (e) {
            console.error('Global script error:', e);
            document.getElementById("current-word").innerText = "Script failed to load";
        }
    </script>
</body>
</html>